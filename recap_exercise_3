def no_dupes?(arr)
    new_hash = Hash.new(0)
    arr.each { |ele| new_hash[ele] += 1}
    new_arr = []
    new_hash.select do |k,v|
        new_arr << k if v ==1
    end

    new_arr

end

# no_dupes?([1, 1, 2, 1, 3, 2, 4])         # => [3, 4]
# no_dupes?(['x', 'x', 'y', 'z', 'z'])     # => ['y']
# # no_dupes?([true, true, true])            # => []

def no_consecutive_repeats?(arr)
    (0...arr.length - 1).each do |i|
        if arr[i] == arr[i+1]
            return false
        end
    end
    return true
end
# p no_consecutive_repeats?(['cat', 'dog', 'mouse', 'dog'])     # => true
# p no_consecutive_repeats?(['cat', 'dog', 'dog', 'mouse'])     # => false
# p no_consecutive_repeats?([10, 42, 3, 7, 10, 3])              # => true
# p no_consecutive_repeats?([10, 42, 3, 3, 10, 3])              # => false
# p no_consecutive_repeats?(['x'])                              # => true

def char_indices(str)
    new_hash = Hash.new { |h,k| h[k] = []}
    str.each_char.with_index do |char, i|
        new_hash[char] << i
    end
    return new_hash
end
# p char_indices('mississippi')   # => {"m"=>[0], "i"=>[1, 4, 7, 10], "s"=>[2, 3, 5, 6], "p"=>[8, 9]}
# p char_indices('classroom')     # => {"c"=>[0], "l"=>[1], "a"=>[2], "s"=>[3, 4], "r"=>[5], "o"=>[6, 7], "m"=>[8]}

def longest_streak(str)
    new_hash = Hash.new(0)
    str.each_char do |char|
        new_hash[char] += 1
    end
    sorted = new_hash.sort_by {|k,v| v}
    return sorted[-1][0] * sorted[-1][1]
end

# p longest_streak('a')           # => 'a'
# p longest_streak('accccbbb')    # => 'cccc'
# p longest_streak('aaaxyyyyyzz') # => 'yyyyy
# p longest_streak('aaabbb')      # => 'bbb'
# p longest_streak('abc')         # => 'c'

def bi_prime?(num)
    (1...num).each do |factor1|
        (factor1...num).each do |factor2|
            return true if factor1 * factor2 == num && is_prime?(factor1) && is_prime?(factor2)
        end
    end
    return false
end

def is_prime?(num)
    return true if num == 1
    (2...num).each {|factor| return false if num % factor == 0 }
    return true
end

# p is_prime?(3)
# p is_prime?(5)
# p is_prime?(10)
# p is_prime?(1)
# p is_prime?(21)

# p bi_prime?(14)   # => true
# p bi_prime?(22)   # => true
# p bi_prime?(25)   # => true
# p bi_prime?(94)   # => true
# p bi_prime?(24)   # => false
# p bi_prime?(64)   # => false

def vigenere_cipher(message, keys)
    alphabet = ("a".."z").to_a
    new_message = ""

    message.each_char.with_index do |char, idx|
        position = alphabet.index(char)
        key = keys[idx % keys.length]
        new_position = (position + key) % alphabet.length
        new_message += alphabet[new_position]
    end

    new_message

end

def vowel_rotate(str)
    vowels = "aeiou"
    new_str = ""
    vowel_arr = []
    str.each_char.with_index do |char, i|
        if vowels.include?(char)
            new_str << "_"
            vowel_arr << char
        else
            new_str << char
        end
    end

    rotated = vowel_arr.rotate(-1)
    final_str = ""
    new_str.each_char do |char|
        if char != "_"
            final_str += char
        else
            final_str += rotated[0]
            rotated.shift
        end
    end

    final_str

end

# p vowel_rotate('computer')

class String
    def select(&prc)
        return "" if prc.nil?
        new_str = ""
        self.each do |char|
            new_str += char if prc.call(char)
        end
        new_str
    end

    def map!(&prc)
        self.each_char.with_index do |char, idx|
            self[idx] = prc.call(char, idx)
        end
    end
end

def multiply(a, b)
    return 0 if a== 0 || b == 0
    return b if a == 1
    return a if b == 1
    if b > 0
        a + multiply(a, b-1)
    else
        -(a + multiply(a, (-b)-1))
    end
end

# p multiply(3, 5)        # => 15
# p multiply(5, 3)        # => 15
# p multiply(2, 4)        # => 8
# p multiply(0, 10)       # => 0
# p multiply(-3, -6)      # => 18
# p multiply(3, -6)       # => -18
# p multiply(-3, 6)       # => -18

def lucas_sequence(num)
    return [] if num == 0
    return [2] if num == 1
    return [2,1] if num == 2
    seq = lucas_sequence(num - 1)
    seq << seq[-1] + seq[-2]

    seq
end

# p lucas_sequence(7)

def prime_factorization(num)
    p_factors = [] #this is wrong
    (2...num).each do |factor|
        if (num % factor == 0)
            next_factor = num / factor
            p_factors << prime_factorization(factor) #this is wrong
            p_factors << prime_factorization(next_factor) #this is wrong
        end
    end
    num     
end

# p prime_factorization(4)

